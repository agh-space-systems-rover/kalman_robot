# The Costmap 2D package implements a 2D grid-based costmap for environmental representations and a number of sensor processing plugins (AI outputs, depth sensor obstacle buffering, semantic information, etc). It is used in the planner and controller servers for creating the space to check for collisions or higher cost areas to negotiate around.
global_costmap:
  global_costmap:
    ros__parameters:
      # See nav2.costmap.yaml.j2 for details on these parameters.
      update_frequency: 3.0
      publish_frequency: 1.0
      width: 50
      height: 50
      resolution: 0.2

# Configuration is analogous to global_costmap.
local_costmap:
  local_costmap:
    ros__parameters:
      # See nav2.costmap.yaml.j2 for details on these parameters.
      update_frequency: 3.0
      publish_frequency: 1.0
      width: 10
      height: 10
      resolution: 0.1

# The Behavior Server implements the server for handling various behavior, such as recoveries and docking, requests and hosting a vector of plugins implementing various C++ behaviors. It is also possible to implement independent behavior servers for each custom behavior, but this server will allow multiple behaviors to share resources such as costmaps and TF buffers to lower incremental costs for new behaviors.
# Note: the wait recovery behavior has no parameters, the duration to wait is given in the action request. Note: pre-Rolling/Humble this was the Recovery server, not behavior server. Launch files, behaviors and tests were all renamed.
behavior_server:
  ros__parameters:
    # Raw costmap topic for collision checking on the local costmap.
    local_costmap_topic: local_costmap/costmap_raw
    # Raw costmap topic for collision checking on the global costmap.
    global_costmap_topic: global_costmap/costmap_raw
    # Topic for footprint in the local costmap frame.
    local_footprint_topic: local_costmap/published_footprint
    # Topic for footprint in the global costmap frame.
    global_footprint_topic: global_costmap/published_footprint
    # Frequency to run behavior plugins.
    cycle_frequency: 10.0
    # The timeout value (in seconds) for action servers to discard a goal handle if a result has not been produced. This used to default to 15 minutes in rcl but was changed to 10 seconds in this PR #1012, which may be less than some actions in Nav2 take to run. For most applications, this should not need to be adjusted as long as the actions within the server do not exceed this deadline. This issue has been raised with OSRF to find another solution to avoid active goal timeouts for bookkeeping, so this is a semi-temporary workaround
    action_server_result_timeout: 900.0
    # TF transform tolerance.
    transform_tolerance: 0.1 # seconds
    # Global frame.
    global_frame: odom
    # Robot base frame.
    robot_base_frame: base_footprint
    # List of plugin names to use, also matches action server names.
    behavior_plugins: ["spin", "backup", "drive_on_heading", "wait", "assisted_teleop"]
    spin:
      plugin: "nav2_behaviors/Spin"
    backup:
      plugin: "nav2_behaviors/BackUp"
    drive_on_heading:
      plugin: "nav2_behaviors/DriveOnHeading"
    wait:
      plugin: "nav2_behaviors/Wait"
    assisted_teleop:
      plugin: "nav2_behaviors/AssistedTeleop"

# The BT Navigator (Behavior Tree Navigator) module implements the NavigateToPose, NavigateThroughPoses, and other task interfaces. It is a Behavior Tree-based implementation of navigation that is intended to allow for flexibility in the navigation task and provide a way to easily specify complex robot behaviors, including recovery.
# Consider checking out the Groot - Interacting with Behavior Trees tutorial for using Groot to visualize and modify behavior trees.
# Make sure to review all parameters for non-default navigator plugins not discussed on this page (e.g. CoverageNavigator or custom additions).
bt_navigator:
  ros__parameters:
    # Reference frame.
    global_frame: odom
    # Robot base frame.
    robot_base_frame: base_footprint
    # Topic on which odometry is published
    odom_topic: /odometry/filtered
    # Blackboard variable to use to supply the goal to the behavior tree for NavigateToPose. Should match ports of BT XML file.
    goal_blackboard_id: goal
    # Blackboard variable to get the path from the behavior tree for NavigateThroughPoses feedback. Should match port names of BT XML file.
    path_blackboard_id: path
    # Blackboard variable to use to supply the goals to the behavior tree for NavigateThroughPoses. Should match ports of BT XML file.
    goals_blackboard_id: goals

    # New to Iron: Plugins for navigator types implementing the nav2_core::BehaviorTreeNavigator interface. They implement custom action servers with custom interface definitions and use that data to populate and process behavior tree navigation requests. Plugin classes are defined under the same namespace, see examples below. Defaults correspond to the NavigateToPoseNavigator and NavigateThroughPosesNavigator navigators.
    navigators: ["navigate_to_pose", "navigate_through_poses"]
    # Path to the default behavior tree XML description for NavigateToPose, see Behavior Tree XML Nodes for details on this file. Used to be default_bt_xml_filename pre-Galactic. You can use substitution to specify file path like $(find-pkg-share my_package)/behavior_tree/my_nav_to_pose_bt.xml.
    default_nav_to_pose_bt_xml: $(find-pkg-share kalman_nav2)/behavior_trees/nav_to_pose.xml
    navigate_to_pose:
      plugin: "nav2_bt_navigator/NavigateToPoseNavigator"
    # Path to the default behavior tree XML description for NavigateThroughPoses, see Behavior Tree XML Nodes for details on this file. New to Galactic after NavigateThroughPoses was added. You can use substitution to specify file path like $(find-pkg-share my_package)/behavior_tree/my_nav_through_poses_bt.xml.
    default_nav_through_poses_bt_xml: $(find-pkg-share kalman_nav2)/behavior_trees/nav_through_poses.xml
    navigate_through_poses:
      plugin: "nav2_bt_navigator/NavigateThroughPosesNavigator"

    # Duration (in milliseconds) for each iteration of BT execution.
    bt_loop_duration: 10
    # Default timeout value (in milliseconds) while a BT action node is waiting for acknowledgement from an action server. This value will be overwritten for a BT node if the input port “server_timeout” is provided.
    default_server_timeout: 20
    # Default timeout value (in milliseconds) while Action or Service BT nodes will waiting for acknowledgement from an service or action server on BT initialization (e.g. wait_for_action_server(timeout)). This value will be overwritten for a BT node if the input port “wait_for_service_timeout” is provided.
    wait_for_service_timeout: 10000 # default: 1000
    # The timeout value (in seconds) for action servers to discard a goal handle if a result has not been produced. This used to default to 15 minutes in rcl but was changed to 10 seconds in this PR #1012, which may be less than some actions in Nav2 take to run. For most applications, this should not need to be adjusted as long as the actions within the server do not exceed this deadline. This issue has been raised with OSRF to find another solution to avoid active goal timeouts for bookkeeping, so this is a semi-temporary workaround
    action_server_result_timeout: 900.0
    # TF transform tolerance.
    transform_tolerance: 0.1 # seconds
    
    # List of behavior tree node shared libraries.
    plugin_lib_names:
      - nav2_compute_path_to_pose_action_bt_node
      - nav2_compute_path_through_poses_action_bt_node
      - nav2_smooth_path_action_bt_node
      - nav2_follow_path_action_bt_node
      - nav2_spin_action_bt_node
      - nav2_wait_action_bt_node
      - nav2_assisted_teleop_action_bt_node
      - nav2_back_up_action_bt_node
      - nav2_drive_on_heading_bt_node
      - nav2_clear_costmap_service_bt_node
      - nav2_is_stuck_condition_bt_node
      - nav2_goal_reached_condition_bt_node
      - nav2_goal_updated_condition_bt_node
      - nav2_globally_updated_goal_condition_bt_node
      - nav2_is_path_valid_condition_bt_node
      - nav2_initial_pose_received_condition_bt_node
      - nav2_reinitialize_global_localization_service_bt_node
      - nav2_rate_controller_bt_node
      - nav2_distance_controller_bt_node
      - nav2_speed_controller_bt_node
      - nav2_truncate_path_action_bt_node
      - nav2_truncate_path_local_action_bt_node
      - nav2_goal_updater_node_bt_node
      - nav2_recovery_node_bt_node
      - nav2_pipeline_sequence_bt_node
      - nav2_round_robin_node_bt_node
      - nav2_transform_available_condition_bt_node
      - nav2_time_expired_condition_bt_node
      - nav2_path_expiring_timer_condition
      - nav2_distance_traveled_condition_bt_node
      - nav2_single_trigger_bt_node
      - nav2_goal_updated_controller_bt_node
      - nav2_is_battery_low_condition_bt_node
      - nav2_navigate_through_poses_action_bt_node
      - nav2_navigate_to_pose_action_bt_node
      - nav2_remove_passed_goals_action_bt_node
      - nav2_planner_selector_bt_node
      - nav2_controller_selector_bt_node
      - nav2_goal_checker_selector_bt_node
      - nav2_controller_cancel_bt_node
      - nav2_path_longer_on_approach_bt_node
      - nav2_wait_cancel_bt_node
      - nav2_spin_cancel_bt_node
      - nav2_back_up_cancel_bt_node
      - nav2_assisted_teleop_cancel_bt_node
      - nav2_drive_on_heading_cancel_bt_node
      - nav2_is_battery_charging_condition_bt_node
    # List of of error codes to compare.
    error_code_names:
      - compute_path_error_code
      - follow_path_error_code

# The Planner Server implements the server for handling the planner requests for the stack and host a map of plugin implementations. It will take in a goal and a planner plugin name to use and call the appropriate plugin to compute a path to the goal. It also hosts the global costmap.
planner_server:
  ros__parameters:
    # Expected planner frequency. If the current frequency is less than the expected frequency, display the warning message.
    expected_planner_frequency: 10.0
    # The timeout value (in seconds) for action servers to discard a goal handle if a result has not been produced. This used to default to 15 minutes in rcl but was changed to 10 seconds in this PR #1012, which may be less than some actions in Nav2 take to run. For most applications, this should not need to be adjusted as long as the actions within the server do not exceed this deadline. This issue has been raised with OSRF to find another solution to avoid active goal timeouts for bookkeeping, so this is a semi-temporary workaround
    action_server_result_timeout: 900.0

    # List of Mapped plugin names for parameters and processing requests.
    planner_plugins: ["GridBased"]
    GridBased:
      plugin: "nav2_navfn_planner/NavfnPlanner"
      tolerance: 0.5 # Plan path to a point max meters from goal; Navfn will loop (2 * tolerance / grid resolution)^2 = 10000 times
      use_astar: True # Use A* or Dijkstra's?
      allow_unknown: True # Plan in unknown space?
      use_final_approach_orientation: False # Last rotation in path aligned with the goal?
    # GridBased:
    #   # This planner implements a cost-aware holonomic A* algorithm within the Smac Planner framework sharing the same code and behaviors as the Hybrid-A* and State Lattice planners.
    #   plugin: "nav2_smac_planner/SmacPlanner2D"
      
    #   # Tolerance in meters between requested goal pose and end of path.
    #   tolerance: 2.0 # default: 0.125
    #   # Cost multiplier to apply to search to steer away from high cost areas. Larger values will place in the center of aisles more exactly (if non-FREE cost potential field exists) but take slightly longer to compute. To optimize for speed, a value of 1.0 is reasonable. A reasonable tradeoff value is 2.0. A value of 0.0 effective disables steering away from obstacles and acts like a naive binary search A*.
    #   cost_travel_multiplier: 1.0
    #   # Whether to allow traversing/search in unknown space.
    #   allow_unknown: true
    #   # If true, the last pose of the path generated by the planner will have its orientation set to the approach orientation, i.e. the orientation of the vector connecting the last two points of the path
    #   use_final_approach_orientation: false

    #   # Whether to downsample costmap to another resolution for search.
    #   downsample_costmap: false
    #   # Multiplier factor to downsample costmap by (e.g. if 5cm costmap at 2 downsample_factor, 10cm output).
    #   downsampling_factor: 1
      
    #   # Maximum number of search iterations before failing to limit compute time, disabled by -1.
    #   max_iterations: -1
    #   # Maximum number of iterations after the search is within tolerance before returning approximate path with best heuristic if exact path is not found.
    #   max_on_approach_iterations: -1
    #   # Maximum planning time in seconds.
    #   max_planning_time: 2.0
      
    #   smoother:
    #     # The maximum number of iterations the smoother has to smooth the path, to bound potential computation.
    #     max_iterations: 0
    #     # Weight for smoother to apply to smooth out the data points
    #     w_smooth: 0.3
    #     # Weight for smoother to apply to retain original data information
    #     w_data: 0.2
    #     # Parameter tolerance change amount to terminate smoothing session
    #     tolerance: 1e-10

smoother_server:
  ros__parameters:
    costmap_topic: global_costmap/costmap_raw
    footprint_topic: global_costmap/published_footprint
    robot_base_frame: base_footprint
    transform_timeout: 0.1
    smoother_plugins: ["simple_smoother"]
    simple_smoother:
      # The maximum number of iterations the smoother has to smooth the path, to bound potential computation.
      max_its: 1000
      # Whether to smooth the smoothed path recursively to refine the quality further
      do_refinement: True
      # Weight for smoother to apply to smooth out the data points
      w_smooth: 0.3
      # Weight for smoother to apply to retain original data information
      w_data: 0.2
      # Parameter tolerance change amount to terminate smoothing session
      tolerance: 0.0000000001

# The Controller Server implements the server for handling the controller requests for the stack and host a map of plugin implementations. It will take in path and plugin names for controller, progress checker and goal checker to use and call the appropriate plugins. It also hosts the local costmap.
controller_server:
  ros__parameters:
    # Frequency to run controller (Hz).
    controller_frequency: 10.0
    # Adds soft real-time priorization to the controller server to better ensure resources to time sensitive portions of the codebase. This will set the controller's execution thread to a higher priority than the rest of the system (90) to meet scheduling deadlines to have less missed loop rates. To use this feature, you use set the following inside of /etc/security/limits.conf to give userspace access to elevated prioritization permissions: <username> soft rtprio 99 <username> hard rtprio 99
    use_realtime_priority: false
    # The timeout value (in seconds) for action servers to discard a goal handle if a result has not been produced. This used to default to 15 minutes in rcl but was changed to 10 seconds in this PR #1012, which may be less than some actions in Nav2 take to run. For most applications, this should not need to be adjusted as long as the actions within the server do not exceed this deadline. This issue has been raised with OSRF to find another solution to avoid active goal timeouts for bookkeeping, so this is a semi-temporary workaround
    action_server_result_timeout: 86400.0 # 24h
    
    # The controller server filters the velocity portion of the odometry messages received before sending them to the controller plugin. Odometry values below this threshold (in m/s) will be set to 0.0.
    min_x_velocity_threshold: 0.001
    # The controller server filters the velocity portion of the odometry messages received before sending them to the controller plugin. Odometry values below this threshold (in m/s) will be set to 0.0. For non-holonomic robots
    min_y_velocity_threshold: 0.001
    # The controller server filters the velocity portion of the odometry messages received before sending them to the controller plugin. Odometry values below this threshold (in rad/s) will be set to 0.0.
    min_theta_velocity_threshold: 0.001
    # The maximum duration in seconds the called controller plugin can fail (i.e. the computeVelocityCommands function of the plugin throwing an exception) before the nav2_msgs::action::FollowPath action fails. Setting it to the special value of -1.0 makes it infinite, 0 to disable, and any positive value for the appropriate timeout.
    failure_tolerance: -1.0 # infinite
    
    # Mapped name for progress checker plugin for checking progress made by robot. Formerly progress_checker_plugin for Humble and older with a single string plugin.
    progress_checker_plugin: "progress_checker"
    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"
      required_movement_radius: 1.0 # robot must have moved 1 m
      movement_time_allowance: 30.0 # in the last 30 seconds
    
    # Mapped name for goal checker plugin for checking goal is reached.
    goal_checker_plugins: ["simple_goal_checker"]
    simple_goal_checker:
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.3 # meters
      yaw_goal_tolerance: 4.0 # radians (allows full circle error)
      stateful: False # do not check XY after rotating
    
    # List of mapped names for controller plugins for processing requests and parameters.
    controller_plugins: ["FollowPath"]
    FollowPath:
      plugin: "service_based_nav2_controller::ServiceBasedNav2Controller"
      compute_velocity_commands_service: "/path_follower/compute_velocity_commands"

# NOTE: kalman_wheels already implements more sophisticated protection mechanisms for the hardware. With the current configuration, kalman_wheels's input is pre-smoothed by velocity_smoother, which is completely unnecessary. However velocity_smoother is always present in the default Nav2 configuration and I am not sure if it should be disabled.

# The nav2_velocity_smoother is a package containing a lifecycle-component node for smoothing velocities sent by Nav2 to robot controllers. The aim of this package is to implement velocity, acceleration, and deadband smoothing from Nav2 to reduce wear-and-tear on robot motors and hardware controllers by smoothing out the accelerations/jerky movements that might be present with some local trajectory planners' control efforts. It can also interpolate velocity commands at higher rates than the controller server publishes.
velocity_smoother:
  ros__parameters:
    # Frequency (Hz) to use the last received velocity command to smooth by velocity, acceleration, and deadband constraints. If set approximately to the rate of your local trajectory planner, it should smooth by acceleration constraints velocity commands. If set much higher, it will interpolate and provide a smooth set of commands to the hardware controller.
    smoothing_frequency: 10.0
    # Whether or not to adjust other components of velocity proportionally to a component's required changes due to acceleration limits. This will try to adjust all components to follow the same direction, but still enforces acceleration limits to guarantee compliance, even if it means deviating off commanded trajectory slightly.
    scale_velocities: false
    # Type of feedback to use for the current state of the robot's velocity. In OPEN_LOOP, it will use the last commanded velocity as the next iteration's current velocity. When acceleration limits are set appropriately, this is a good assumption. In CLOSED_LOOP, it will use the odometry from the odom topic to estimate the robot's current speed. In closed loop mode, it is important that the odometry is high rate and low latency, relative to the smoothing frequency.
    feedback: "OPEN_LOOP"
    # Maximum velocities (m/s) in [x, y, theta] axes.
    max_velocity: [2.0, 2.0, 2.0]
    # Minimum velocities (m/s) in [x, y, theta] axes. This is signed and thus must be negative to reverse. Note: rotational velocities negative direction is a right-hand turn, so this should always be negative regardless of reversing preference.
    min_velocity: [-2.0, -2.0, -2.0]
    # Minimum velocities (m/s) to send to the robot hardware controllers, to prevent small commands from damaging hardware controllers if that speed cannot be achieved due to stall torque.
    deadband_velocity: [0.0, 0.0, 0.0]
    # Timeout (s) after which the velocity smoother will send a zero-ed out Twist command and stop publishing.
    velocity_timeout: 1.0
    # Maximum acceleration to apply to each axis [x, y, theta].
    max_accel: [0.5, 0.5, 0.5]
    # Minimum acceleration to apply to each axis [x, y, theta]. This is signed and thus these should generally all be negative.
    max_decel: [-0.5, -0.5, -0.5]
    # Topic to find robot odometry, if in CLOSED_LOOP operational mode.
    # odom_topic: "odom"
    # Time (s) to buffer odometry commands to estimate the robot speed, if in CLOSED_LOOP operational mode.
    # odom_duration: 0.1
