# The contents of this file are pasted into global_costmap.global_costmap.ros__parameters and local_costmap.local_costmap.ros__parameters in the nav2.yaml.j2 file.
# If nav2.yaml.j2 contains its own parameters for these sections, they will override these parameters.
# I.e. properties from nav2.yaml.j2 are merged-in on top of those from here.
# Any parameters that are commented out with ##### here should be set in nav2.yaml.j2.

# Reference frame.
global_frame: odom # default: map
# Robot base frame.
robot_base_frame: base_footprint # default: base_link
# Topic of map from map_server or SLAM.
map_topic: /map # default: /map

# Costmap update frequency.
##### update_frequency: 1.0 # default: 5.0
# Frequency to publish costmap to topic.
##### publish_frequency: 1.0 # default: 1.0
# Whether to send full costmap every update, rather than updates.
always_send_full_costmap: false # default: false

# Width of costmap (m).
##### width: 5 # default: 5
# Height of costmap (m).
##### height: 5 # default: 5
# X origin of the costmap relative to width (m).
origin_x: 0.0 # default: 0.0
# Y origin of the costmap relative to height (m).
origin_y: 0.0 # default: 0.0
# Resolution of 1 pixel of the costmap, in meters.
##### resolution: 0.1 # default: 0.1

# Whether costmap should roll with robot base frame.
rolling_window: true # default: false
# If occupancy grid map should be interpreted as only 3 values (free, occupied, unknown) or with its stored values.
# trinary_costmap: true
# If false, treats unknown space as free space, else as unknown space.
track_unknown_space: false # default: false
# Whether when combining costmaps to use the maximum cost or override.
use_maximum: false # default: false

# Cost of unknown space if tracking it.
unknown_cost_value: 255 # default: 255
# Minimum cost of an occupancy grid map to be considered a lethal obstacle.
lethal_cost_threshold: 1000000 # default: 100

# TF transform tolerance.
transform_tolerance: 0.3 # seconds; default: 0.3
# Time to wait for the transform from robot base frame to global frame to become available. If exceeded, the configuration stage is aborted.
transform_timeout: 60.0 # seconds; default: 60.0

# Ordered set of footprint points passed in as a string, must be closed set. For example, the following defines a square base with side lengths of 0.2 meters footprint: “[ [0.1, 0.1], [0.1, -0.1], [-0.1, -0.1], [-0.1, 0.1] ]”. Note that this can also be adjusted over time using the costmap's ~/footprint topic, which will update the polygon over time as needed due to changes in the robot's state, such as movement of an attached manipulator, picking up a pallet, or other actions that adjust a robot's shape.
footprint: "[[0.4, 0.4], [0.4, -0.4], [-0.6, -0.4], [-0.6, 0.4]]" # default: "[]"
# Amount to pad footprint (m).
footprint_padding: 0.1 # default: 0.01
# Robot radius to use, if footprint coordinates not provided.
robot_radius: 0.7 # default: 0.1

# List of mapped costmap filter names for parameter namespaces and names.
# filters: [] # default: []
# WARNING: Do not explicitly set it to [] - it will complain.

# List of mapped plugin names for parameter namespaces and names.
# - static_layer is enabled if static_map is truthy.
# - stvl is enabled if at least one RGBD camera is up.
plugins: [
  "obstacle_layer",
  {% if static_map %}
  "static_layer",
  {% endif %}
  {% if rgbd_ids %}
  "stvl",
  {% endif %}
  "inflation_layer"
]
# default: ["static_layer", "obstacle_layer", "inflation_layer"]

# Dummy obstacle layer that clears the robot's footprint.
# It is needed when no other layers are present because
# Nav2 will freak out if it does not receive any costmap updates.
obstacle_layer:
  plugin: "nav2_costmap_2d::ObstacleLayer"
  enabled: true
  footprint_clearing_enabled: true

{% if static_map %}
static_layer:
  plugin: "nav2_costmap_2d::StaticLayer"
  enabled: true # default: true

  # Subscribe to static map updates after receiving first.
  subscribe_to_updates: false # default: false
  # QoS settings for map topic; Needed to subscribe to latched map topic.
  map_subscribe_transient_local: true # default: true
  # TF tolerance.
  transform_tolerance: 0.0 # seconds; default: 0.0
  # Map topic to subscribe to. If left empty the map topic will default to the global map_topic parameter in costmap_2d_ros.
  map_topic: "" # default: ""
{% endif %}

{% if rgbd_ids %}
# Why use STVL:
# - Standard voxel layer only clears obstacles when other obstacles are detected behind them.
# - STVL on the other hand clears obstacles when they are not detected in the frustum anymore.
# - Obstacle layer does not have its own memory like voxel layers so it is not suitable for mapping.
stvl:
  plugin: "spatio_temporal_voxel_layer/SpatioTemporalVoxelLayer"
  enabled: true

  origin_z: 0.0                   # meters
  voxel_size: 0.1                 # meters
  
  voxel_decay: 30.0               # seconds if linear, e^n if exponential
  decay_model: 0                  # 0=linear, 1=exponential, -1=persistent
  mark_threshold: 0               # voxel height
  track_unknown_space: true       # default space is unknown
  
  combination_method: 1           # 1=max, 0=override
  update_footprint_enabled: false # default off
  transform_tolerance: 1.0        # seconds

  publish_voxel_map: false        # default off
  mapping_mode: false             # default off, saves map not for navigation
  map_save_duration: 60.0         # default 60s, how often to autosave

  # Multi-camera setup using Jinja2 templating:
  # List of sources of sensors as a string.
  observation_sources: {{ rgbd_ids | join(' ') }}
{% for rgbd_id in rgbd_ids %}
  {{ rgbd_id }}:
    data_type: PointCloud2
    topic: /{{ rgbd_id }}/point_cloud/obstacles # must be absolute topic name

    # Marking params:
    marking: true
    obstacle_range: 5.0           # meters
    min_obstacle_height: -10000.0 # default 0, meters
    max_obstacle_height: 10000.0  # default 3, meters
    clear_after_reading: true     # default false, clear the buffer after the layer gets readings from it
    filter: ""                    # default passthrough, apply "voxel", "passthrough", or no filter to sensor data, recommended to have at one filter on
      
    # Clearing params:
    clearing: true
    min_z: 0.5                  # default 0, meters
    max_z: 3.0                  # default 10, meters
    vertical_fov_angle: 1.025   # default 0.7, radians
    horizontal_fov_angle: 1.571 # default 1.04, radians
    decay_acceleration: 0.1     # default 0, 1/s^2. If laser scanner MUST be 0
{% endfor %}
{% endif %}

# This layer places an exponential decay functions around obstacles to increase cost to traverse near collision. It also places a lethal cost around obstacles within the robot's fully inscribed radius - even if a robot is non-circular for optimized first-order collision checking.
inflation_layer:
  plugin: "nav2_costmap_2d::InflationLayer"
  enable: true # default: true

  # Radius to inflate costmap around lethal obstacles.
  inflation_radius: 1.2 # default: 0.55
  # Exponential decay factor across inflation radius.
  cost_scaling_factor: 5.0 # default: 10.0

  # Whether to inflate unknown cells as if lethal.
  inflate_unknown: false # default: false
  # Whether to inflate unknown cells.
  inflate_around_unknown: false # default: false
